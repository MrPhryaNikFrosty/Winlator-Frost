name: Build Turnip Vulkan Driver for ARM64 (Winlator-Compatible)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    name: Build Turnip Vulkan Driver (ARM64)

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # Don't fail if submodules have missing URLs
          submodules: false
          fetch-depth: 1

      - name: Fix Missing Submodules Gracefully
        run: |
          echo "⚙️ Checking .gitmodules..."
          if [ -f .gitmodules ]; then
            # Remove invalid submodules (like OpenXR-SDK without URL)
            grep -B1 'OpenXR-SDK' .gitmodules || true
            git config --file=.gitmodules --remove-section "submodule.app/src/main/cpp/OpenXR-SDK" || true
            git add .gitmodules || true
          fi
          echo "✅ Submodule check completed. Continuing..."

      - name: Prepare Build Environment
        run: |
          sudo dpkg --add-architecture arm64
          sudo apt-get update -y
          sudo apt-get upgrade -y

      - name: Install Host + Cross Toolchain and Dependencies (A→Z)
        run: |
          set -e
          sudo apt-get install -y --no-install-recommends \
            build-essential pkg-config cmake ninja-build git wget curl unzip ca-certificates \
            python3 python3-pip python3-venv python3-setuptools python3-wheel python3-mako python3-yaml \
            autoconf automake libtool gettext autopoint help2man \
            bison flex byacc m4 dos2unix rsync gettext \
            crossbuild-essential-arm64 gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            qemu-user-static binfmt-support \
            libx11-dev:arm64 libxext-dev:arm64 libxrandr-dev:arm64 libxrender-dev:arm64 \
            libxfixes-dev:arm64 libxdamage-dev:arm64 libxv-dev:arm64 libx11-xcb-dev:arm64 \
            libxcb1-dev:arm64 libxcb-glx0-dev:arm64 libxcb-shm0-dev:arm64 libxcb-dri2-0-dev:arm64 \
            libxcb-dri3-dev:arm64 libxcb-present-dev:arm64 libxcb-sync-dev:arm64 libxcb-xfixes0-dev:arm64 \
            libxshmfence-dev:arm64 libxxf86vm-dev:arm64 libxkbcommon-dev:arm64 \
            libwayland-dev:arm64 wayland-protocols libwayland-egl-backend-dev:arm64 \
            libdrm-dev:arm64 libdrm2:arm64 libexpat1-dev:arm64 libelf-dev:arm64 \
            libudev-dev:arm64 libpci-dev:arm64 zlib1g-dev:arm64 \
            libvulkan-dev:arm64 libxcb-present-dev:arm64 \
            gettext flex bison pkg-config automake libtool python3-distutils-extra \
            x11-utils x11-apps
          pip install --upgrade meson ninja mako

      - name: Build glslangValidator (with SPIR-V Tools)
        run: |
          set -e
          git clone --depth=1 https://github.com/KhronosGroup/SPIRV-Tools.git
          git clone --depth=1 https://github.com/KhronosGroup/SPIRV-Headers.git
          git clone --depth=1 https://github.com/KhronosGroup/glslang.git
          cd glslang
          mkdir build && cd build
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DENABLE_OPT=ON \
                -DALLOW_EXTERNAL_SPIRV_TOOLS=ON \
                -DSPIRV-Headers_SOURCE_DIR=../../SPIRV-Headers \
                -DSPIRV-Tools_SOURCE_DIR=../../SPIRV-Tools \
                -DCMAKE_INSTALL_PREFIX=/usr/local ..
          make -j$(nproc)
          sudo make install
          cd ../..
          glslangValidator --version || true

      - name: Prepare Mesa Source
        run: |
          set -e
          if [ ! -d mesa ]; then
            git clone --depth=1 https://gitlab.freedesktop.org/mesa/mesa.git
          fi
          cd mesa
          git submodule update --init --depth=1 || true

      - name: Create ARM64 Cross File
        run: |
          cat <<EOF > cross_file.txt
          [binaries]
          c = '/usr/bin/aarch64-linux-gnu-gcc'
          cpp = '/usr/bin/aarch64-linux-gnu-g++'
          ar = '/usr/bin/aarch64-linux-gnu-ar'
          strip = '/usr/bin/aarch64-linux-gnu-strip'
          pkgconfig = 'pkg-config'
          exe_wrapper = '/usr/bin/qemu-aarch64-static'

          [host_machine]
          system = 'linux'
          cpu_family = 'aarch64'
          cpu = 'armv8-a'
          endian = 'little'
          EOF

      - name: Configure Mesa Build
        run: |
          cd mesa
          meson setup build \
            --cross-file ../cross_file.txt \
            -Dplatforms=x11,wayland \
            -Dvulkan-drivers=freedreno \
            -Dgallium-drivers=[] \
            -Dbuildtype=release \
            -Doptimization=3 \
            -Dglx=disabled \
            -Degl=disabled \
            -Dshared-glapi=disabled \
            -Dgles1=disabled \
            -Dgles2=disabled \
            -Dopengl=false \
            -Dllvm=disabled \
            -Dprefix=/usr/local
          meson configure build

      - name: Build Mesa (Turnip)
        run: |
          cd mesa
          ninja -C build
          ls -lh build/src/freedreno/vulkan || true

      - name: Upload Turnip Driver Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: turnip-driver-arm64
          path: mesa/build/src/freedreno/vulkan
