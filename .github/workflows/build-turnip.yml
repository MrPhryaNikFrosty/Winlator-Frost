name: Build Mesa Turnip (ARM64, cross-built with QEMU)

on:
  workflow_dispatch:  # âœ… allows manual "Run workflow" trigger

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare host environment (install host and cross runtime)
        run: |
          set -e
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            git wget curl ca-certificates software-properties-common \
            build-essential binutils make perl pkg-config cmake ninja-build \
            python3 python3-pip python3-venv python3-yaml python3-mako python3-setuptools python3-wheel \
            clang llvm qemu-user-static binfmt-support \
            crossbuild-essential-arm64 gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            libwayland-dev wayland-protocols libwayland-egl-backend-dev \
            libx11-dev libxext-dev libxdamage-dev libxfixes-dev \
            libxcb-glx0-dev libxcb-dri2-0-dev libxcb-dri3-dev libxcb-present-dev \
            libxcb-sync-dev libxshmfence-dev libxxf86vm-dev libvulkan-dev \
            libdrm-dev libexpat1-dev libelf-dev bison flex byacc zlib1g-dev \
            spirv-tools glslang-tools libclc-dev

          python3 -m pip install --upgrade --user meson mako pyyaml ninja
          echo "$HOME/.local/bin" >> $GITHUB_PATH

          sudo dpkg --add-architecture arm64
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            libc6:arm64 libstdc++6:arm64 libgcc-s1:arm64 zlib1g:arm64 libexpat1:arm64 libdrm2:arm64

          if [ ! -f /lib/ld-linux-aarch64.so.1 ]; then
            if [ -f /lib/aarch64-linux-gnu/ld-linux-aarch64.so.1 ]; then
              sudo ln -sf /lib/aarch64-linux-gnu/ld-linux-aarch64.so.1 /lib/ld-linux-aarch64.so.1
            fi
          fi

      - name: Clone Mesa source
        run: |
          git clone --depth=1 https://gitlab.freedesktop.org/mesa/mesa.git mesa
          ls -la mesa

      - name: Build glslang (host)
        run: |
          set -e
          cd "${{ github.workspace }}"
          git clone --depth=1 https://github.com/KhronosGroup/glslang.git
          cd glslang
          mkdir build && cd build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DENABLE_OPT=OFF -DCMAKE_INSTALL_PREFIX=/usr ..
          ninja -j$(nproc)
          sudo cp StandAlone/glslangValidator /usr/local/bin/
          /usr/local/bin/glslangValidator --version

      - name: Create Meson cross file & build Mesa
        run: |
          set -e
          cd mesa

          cat > cross_file.txt <<'EOF'
[binaries]
c = '/usr/bin/aarch64-linux-gnu-gcc'
cpp = '/usr/bin/aarch64-linux-gnu-g++'
ar = '/usr/bin/aarch64-linux-gnu-ar'
strip = '/usr/bin/aarch64-linux-gnu-strip'
pkgconfig = 'pkg-config'
exe_wrapper = '/usr/bin/qemu-aarch64-static'

[host_machine]
system = 'linux'
cpu_family = 'aarch64'
cpu = 'armv8'
endian = 'little'
EOF

          mkdir -p build && cd build
          meson setup --cross-file ../cross_file.txt \
            -Dplatforms=x11,wayland \
            -Dvulkan-drivers=freedreno \
            -Dgallium-drivers=[] \
            -Dbuildtype=release \
            -Dllvm=disabled \
            -Dshared-llvm=false \
            --prefix=/usr/local ..

          ninja -C . -j$(nproc)
          sudo ninja -C . install

      - name: Collect & upload artifacts
        run: |
          set -e
          mkdir -p artifacts
          find mesa/build -name "libvulkan_freedreno.so" -exec cp {} artifacts/ \;
          ls -la artifacts
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: libvulkan_freedreno-arm64
          path: artifacts/
